name: Deploy production
on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    container: node:lts-slim
    # 아래 defaults 의 run 설정은 node 루트 경로와 저장소 루트가 일치하지 않아 추가됨
    # 일반 프로젝트에는 필요없음
    defaults: 
      run:
        working-directory: typescript-example

    env: 
      AWS_ENDPOINT: dynamodb:8000

    # 서비스 아래의 rdb1, rdb2, cache 값은 다른 값으로 설정 가능하며 해당 서비스의 DOMAIN NAME 으로 사용됩니다.
    # 모든 설정 방법은 docker 설정과 일치합니다. 에를 들어 port 값은 좌측은 외부 port 우측은 포워딩 되는 내부 포트입니다.
    services:
      rdb1:
        image: postgres
        ports:
          - 5432:5432
      rdb2:
        image: mysql:5
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
        ports:
          - 3306:3306
      dynamodb:
        image: amazon/dynamodb-local
        ports:
          - 8000:8000
      cache:
        image: redis:6
        ports:
          - 6379:6379

    steps:
    # 아래의 명령문들이 테스트를 하기 위한 설정 및 실행들 입니다. run 하나가 Linux 에서의 명령문입니다.
      - uses: actions/checkout@v2

      - name: setup node environment
      # package-lock.json 파일이 저장소에 있을 때는 npm ci 명령어 사용 가능
        run: npm install

      - name: Install RDB Dependencies
        run: apt-get update && apt-get install -y default-mysql-client

      - name: Initialize RDB MySQL
        run: mysql -h rdb2 -u root -prootpassword < dump.sql

      - name: Initialize RDB Postgres
        run: node .github/scripts/initialize_pg.js

      - name: Initialize DynamoDB 
        run: node .github/scripts/init_dynamo.js

      - name: Build and Test
        run: npx jest
      # 상단의 services 에서 설정한 이름의 DOMAIN 값을 사용하기 위해 서비스 내부에 env 값을 설정해줍니다.
      # 해당 값을 바라보기 위해선 node, django 서비스 에서 OS 의 env 값을 읽어오는 설정을 해야합니다.
        env: 
          DB_HOST: postgres
          NOSQL_HOST: dynamodb
          CACHE_HOST: cache

      - name: Success
        run: echo deployed successfully.
